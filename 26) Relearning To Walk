# constants
var NO_TILE = -1
var UNKNOWN_TILE = -999
var NO_DATA = -20000
var MOVE = 100
var TURN = 200
var SCAN = 300

#variables
seq good[]
seq bad[]

#functions
fun MoveForward()
    transmit(0, MOVE)
    robo_forward()

fun TurnLeft()
    transmit(0, TURN)
    robo_left()

fun Robo_Scaner()
    transmit(0, SCAN)
    return WaitData()

fun WaitData()
    var data = NO_DATA
    while data is NO_DATA
        data = receive(0)
    return data

fun Adjacent(loc)
    var check = 1
    var adj = robo_detect_adjacent()
    if adj is 3
        AddInArray(loc, good[])
        MoveForward()
    else
        for i in 0, 1
            TurnLeft()
            var scan = Robo_Scaner()
            if scan > 0 or InArray(robo_forward_location(), good[])
                adj -= 1
            else if scan is UNKNOWN_TILE and not InArray(robo_forward_location(), bad[])
                check = 0
        TurnLeft()
        if adj and check
            AddInArray(loc, good[])
            MoveForward()
        else if check
            AddInArray(loc, bad[])
            TurnLeft()
    return check

fun InArray(loc, arr[])
    for tile in arr[]
        if tile is loc
            return 1
    return 0

fun AddInArray(loc, arr[])
    if not InArray(loc, arr[])
        arr[].add(loc)

#main
loop
    var scan = Robo_Scaner()
    if scan > 0
        MoveForward()
    else if scan is NO_TILE
        TurnLeft()
    else
        scan = robo_forward_location()
        if InArray(scan, good[])
            MoveForward()
        else if InArray(scan, bad[])
            TurnLeft()
        else if not Adjacent(scan)
            TurnLeft()

----------------------------------------------------------------

# constants
var NO_DATA = -20000
var MOVE = 100
var TURN = 200
var SCAN = 300

#functions
fun WaitData()
    var data = NO_DATA
    while data is NO_DATA
        data = receive(0)
    return data

#main
loop
    var order = WaitData()
    if order is MOVE
        probo_forward()
    else if order is TURN
        probo_left()
    else if order is SCAN
        for get in 1, 0
            probo_forward()
            if get
                transmit(0, probo_scan())
            probo_left()
            probo_left()

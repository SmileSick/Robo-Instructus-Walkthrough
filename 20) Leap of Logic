# constants
var NO_TILE = -1
var UNKNOWN_TILE = -999
var JUMP_PAD = 3

# variable
seq good[]
seq bad[]
var scan
var dir = 90

#functions
fun TurnLeft()
    robo_left()
    dir = (dir + 120) % 360

fun MoveForward()
    robo_forward()
    dir = (dir + 300) % 360

fun AddInArray(loc, arr[])
    if not InArray(loc, arr[])
        arr[].add(loc)

fun Adjacent(loc)
    var check = 1
    var adj = robo_detect_adjacent()
    if adj is 3
        good[].add(loc)
        MoveForward()
    else
        for i in 0, 1
            TurnLeft()
            scan = robo_scan()
            if scan > 0 or InArray(robo_forward_location(), good[])
                adj -= 1
            else if scan is UNKNOWN_TILE and not InArray(robo_forward_location(), bad[])
                check = 0
        TurnLeft()
        if adj and check
            good[].add(loc)
            MoveForward()
        else if check
            bad[].add(loc)
            TurnLeft()
    return check

fun InArray(loc, arr[])
    for tile in arr[]
        if tile is loc
            return 1
    return 0

fun LookAt(direction)
    while dir is not direction
        TurnLeft()

fun CheckJump()
    LookAt(90)
    if robo_detect_3() is 1
        TurnLeft()
        TurnLeft()
        MoveForward()
        robo_use()
        good[].add(robo_location())
        TurnLeft()
    else
        TurnLeft()

fun JumpScaner()
    if dir is 90
        MoveForward()
        TurnLeft()
        MoveForward()
    else if dir is 210
        MoveForward()
        MoveForward()
    CheckJump()

# main program
loop
    scan = robo_scan()
    if scan is JUMP_PAD
        JumpScaner()
    else if scan > 0
        MoveForward()
    else if scan is NO_TILE
        TurnLeft()
    else
        var loc = robo_forward_location()
        if InArray(loc, good[])
            MoveForward()
        else if InArray(loc, bad[]) or not Adjacent(loc)
            TurnLeft()

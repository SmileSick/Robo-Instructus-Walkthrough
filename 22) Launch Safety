# constants
var NO_TILE = -1
var UNKNOWN_TILE = -999
var JUMP_PAD = 3
var RIGHT = 0
var LEFT = not RIGHT
var MAX_STEPS = 10

# global variable declaration
seq good[]
seq bad[]
seq rightJump[]
seq leftJump[]
seq badJump[]
var scan
var steps
var dir = 90

#functions
fun TurnLeft()
    robo_left()
    dir = (dir + 120) % 360

fun MoveForward()
    robo_forward()
    dir = (dir + 300) % 360
    CheckCircle()

fun CheckCircle()
    steps += 1
    if steps > MAX_STEPS
        steps = 0
        TurnLeft()
        TurnLeft()
        MoveForward()

fun Move(step, left, add)
    var count
    while count < step
        MoveForward()
        if add
            AddInArray(robo_location(), good[])
        count += 1
        if count % 2 is left
            TurnLeft()

fun AddInArray(loc, arr[])
    if not InArray(loc, arr[])
        arr[].add(loc)

fun InArray(loc, arr[])
    for tile in arr[]
        if tile is loc
            return 1
    return 0

fun Adjacent(loc)
    var check = 1
    var adj = robo_detect_adjacent()
    if adj is 3
        good[].add(loc)
        MoveForward()
    else
        for i in 0, 1
            TurnLeft()
            var scan = robo_scan()
            if scan > 0 or InArray(robo_forward_location(), good[])
                adj -= 1
            else if scan is UNKNOWN_TILE and not InArray(robo_forward_location(), bad[])
                check = 0
        TurnLeft()
        if adj and check
            good[].add(loc)
            MoveForward()
        else if check
            bad[].add(loc)
            TurnLeft()
    return check

fun ScanAllDir()
    steps = 0
    for i in 0, 1, 2
        var detect = robo_detect_3()
        if detect is 3
            for add in 1, 0
                Move(3, RIGHT, add)
                TurnLeft()
                TurnLeft()
        else if detect is 0
            AddInArray(robo_forward_location(), bad[])
        detect = robo_detect_3l()
        if detect is 3
            for add in 1, 0
                Move(3, LEFT, add)
                TurnLeft()
                TurnLeft()
        else if detect is 0
            AddInArray(robo_forward_location(), bad[])
        TurnLeft()

fun LookAt(direction)
    var count
    while dir is not direction
        TurnLeft()
        count += 1
    return count

fun CheckJump()
    scan = robo_location()
    if not InArray(scan, badJump[])
        var count = (3 - LookAt(90)) % 3
        if robo_detect_3l() is 1
            Jump(LEFT)
            return 1
        else if robo_detect_3() is 1
            Jump(RIGHT)
            return 1
        else
            badJump[].add(scan)
            while count > 0
                TurnLeft()
                count -= 1
    return 0

fun Jump(left)
    steps = 0
    TurnLeft()
    if not left
        TurnLeft()
    if robo_scan() is JUMP_PAD
        MoveForward()
        robo_use()
        good[].add(robo_location())

fun JumpScaner()
    scan = robo_forward_location()
    if dir is 90
        if InArray(scan, rightJump[]) or robo_detect_3() is 2
            AddInArray(scan, rightJump[])
            Move(2, RIGHT, 0)
            AddInArray(robo_location(), good[])
            CheckJump()
        else if InArray(scan, leftJump[]) or robo_detect_3l() is 2
            AddInArray(scan, leftJump[])
            Move(2, LEFT, 0)
            AddInArray(robo_location(), good[])
            CheckJump()
        else
            TurnLeft()
    else
        if not CheckJump()
            if dir is 210
                AddInArray(scan, rightJump[])
                if InArray(scan, leftJump[]) or robo_detect_3() is 3
                    Move(2, RIGHT, 0)
                    AddInArray(scan, leftJump[])
                    CheckJump()
                else if robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                else
                    TurnLeft()
            else #330
                AddInArray(scan, leftJump[])
                if robo_detect_3() is 3
                    Move(2, RIGHT, 0)
                else if InArray(scan, rightJump[]) or robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                    AddInArray(scan, leftJump[])
                    CheckJump()
                else if robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                else
                    TurnLeft()

# main program
loop
    scan = robo_scan()
    if scan is JUMP_PAD
        JumpScaner()
    else if scan > 0
        MoveForward()
    else if scan is NO_TILE
        TurnLeft()
    else
        var loc = robo_forward_location()
        if InArray(loc, good[])
            MoveForward()
        else if InArray(loc, bad[])
            TurnLeft()
        else if not Adjacent(loc)
            ScanAllDir()

# constants
var NO_TILE = -1
var UNKNOWN_TILE = -999
var JUMP_PAD = 3
var RIGHT = 0
var LEFT = not RIGHT

# global variable declaration
seq good[]
seq bad[]
seq rightJump[]
seq leftJump[]
var scan
var dir = 90

#functions
fun TurnLeft()
    robo_left()
    dir = (dir + 120) % 360

fun MoveForward()
    robo_forward()
    dir = (dir + 300) % 360

fun Move(step, left, add)
    var count
    while count < step
        if step is 3 and robo_scan() is JUMP_PAD
            return 0
        MoveForward()
        if add
            AddInArray(robo_location(), good[])
        count += 1
        if count % 2 is left or (count is 3 and not left)
            TurnLeft()
    return 1

fun AddInArray(loc, arr[])
    if not InArray(loc, arr[])
        arr[].add(loc)

fun InArray(loc, arr[])
    for tile in arr[]
        if tile is loc
            return 1
    return 0

fun Adjacent(loc)
    var check = 1
    var adj = robo_detect_adjacent()
    if adj is 3
        good[].add(loc)
        MoveForward()
    else
        for i in 0, 1
            TurnLeft()
            var scan = robo_scan()
            if scan > 0 or InArray(robo_forward_location(), good[])
                adj -= 1
            else if scan is UNKNOWN_TILE and not InArray(robo_forward_location(), bad[])
                check = 0
        TurnLeft()
        if adj and check
            good[].add(loc)
            MoveForward()
        else if check
            bad[].add(loc)
            TurnLeft()
    return check

fun ScanAllDir()
    var check
    var detect = robo_detect_3()
    if detect is 3
        check = 1
        if not Move(3, RIGHT, 1)
            return
    else if detect is 0
        AddInArray(robo_forward_location(), bad[])
    detect = robo_detect_3l()
    if detect is 3
        check = 1
        if not Move(3, LEFT, 1)
            return
    else if detect is 0
        AddInArray(robo_forward_location(), bad[])
    if not check
        TurnLeft()

fun LookAt(direction)
    var count
    while dir is not direction
        TurnLeft()
        count += 1
    return count

fun Jump(left)
    TurnLeft()
    if not left
        TurnLeft()
    if robo_scan() is JUMP_PAD
        MoveForward()
        robo_use()
        var loc = robo_location()
        if InArray(loc, good[])
            TurnLeft()
            TurnLeft()
            return 1
        else
            good[].add(loc)
            if left
                TurnLeft()
            AddInArray(robo_forward_location(), good[])
            return 1
    return 0

fun CheckJump(direction)
    scan = robo_location()
    var detect
    var count = (3 - LookAt(90)) % 3
    if direction is 330
        AddInArray(scan, leftJump[])
        detect = robo_detect_3()
        if detect is 3 or (detect is 2 and (robo_scan() is NO_TILE or InArray(robo_forward_location(), bad[])))
            if Jump(RIGHT)
                return 1
            else
                TurnLeft()
    else
        AddInArray(scan, rightJump[])
        detect = robo_detect_3l()
        if detect is 3 or (detect is 2 and (robo_scan() is NO_TILE or InArray(robo_forward_location(), bad[])))
            if Jump(LEFT)
                return 1
            else
                TurnLeft()
                TurnLeft()
    while count > 0
        TurnLeft()
        count -= 1
    return 0

fun JumpScaner()
    scan = robo_forward_location()
    if dir is 90
        if InArray(scan, rightJump[]) or robo_detect_3() is 3
            AddInArray(scan, rightJump[])
            Move(2, RIGHT, 0)
            AddInArray(robo_location(), good[])
            CheckJump()
        else if InArray(scan, leftJump[]) or robo_detect_3l() is 3
            AddInArray(scan, leftJump[])
            Move(2, LEFT, 0)
            AddInArray(robo_location(), good[])
            CheckJump()
        else
            TurnLeft()
    else
        if not CheckJump(dir)
            if dir is 210
                AddInArray(scan, rightJump[])
                if InArray(scan, leftJump[]) or robo_detect_3() is 3
                    Move(2, RIGHT, 0)
                    AddInArray(scan, leftJump[])
                    CheckJump(dir)
                else if robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                else
                    TurnLeft()
            else #330
                AddInArray(scan, leftJump[])
                if robo_detect_3() is 3
                    Move(2, RIGHT, 0)
                else if InArray(scan, rightJump[]) or robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                    AddInArray(scan, leftJump[])
                    CheckJump(dir)
                else if robo_detect_3l() is 3
                    Move(2, LEFT, 0)
                else
                    TurnLeft()

# main program
loop
    scan = robo_scan()
    if scan is JUMP_PAD
        JumpScaner()
    else if scan > 0
        MoveForward()
    else if scan is NO_TILE
        TurnLeft()
    else
        var loc = robo_forward_location()
        if InArray(loc, good[])
            MoveForward()
        else if InArray(loc, bad[])
            TurnLeft()
        else if not Adjacent(loc)
            ScanAllDir()

# constants
var RIGHT = 0
var LEFT = 1
var NO_TILE = -1
var JUMP_PAD = 3
var UNKNOWN_TILE = -999
var NO_DATA = -20000
var MOVE = 100
var TURN = 200
var SCAN = 300
var DETECT_R = 400
var DETECT_L = 500
var JUMP = 600

#variables
seq good[]
seq bad[]
var scan
var dir = 90

#functions
fun MoveForward()
    transmit(0, MOVE)
    robo_forward()
    dir -= 60
    if dir < 0
        dir += 360

fun TurnLeft()
    transmit(0, TURN)
    robo_left()
    dir += 120
    if dir >= 360
        dir -= 360

fun WaitData()
    scan = NO_DATA
    while scan is NO_DATA
        scan = receive(0)

fun Robo_Scaner()
    transmit(0, SCAN)
    WaitData()
    return scan

fun Adjacent(loc)
    var check = 1
    var adj = robo_detect_adjacent()
    if adj is 3
        AddInArray(loc, good[])
        MoveForward()
    else
        for i in 0, 1
            TurnLeft()
            scan = Robo_Scaner()
            if scan > 0 or InArray(robo_forward_location(), good[])
                adj -= 1
            else if scan is UNKNOWN_TILE and not InArray(robo_forward_location(), bad[])
                check = 0
        TurnLeft()
        if adj and check
            AddInArray(loc, good[])
            MoveForward()
        else if check
            AddInArray(loc, bad[])
            TurnLeft()
    return check

fun InArray(loc, arr[])
    for tile in arr[]
        if tile is loc
            return 1
    return 0

fun AddInArray(loc, arr[])
    if not InArray(loc, arr[])
        arr[].add(loc)

fun LookUp()
    while dir is not 90
        TurnLeft()

fun Jump(left)
    transmit(0, JUMP)
    WaitData()
    TurnLeft()
    if not left
        TurnLeft()
    MoveForward()
    robo_use()

fun CheckJump()
    scan = robo_location()
    LookUp()
    if DetectRight()
        Jump(RIGHT)
        return 1
    if DetectLeft()
        Jump(LEFT)
        return 1
    TurnLeft()
    return 0

fun DetectRight()
    transmit(0, DETECT_R)
    WaitData()
    return scan

fun DetectLeft()
    transmit(0, DETECT_L)
    WaitData()
    return scan

fun JumpScaner()
    scan = robo_forward_location()
    if dir is 90
        Move(2, RIGHT)
        CheckJump()
    else
        if not CheckJump()
            if dir is 210
                Move(2, RIGHT)
                CheckJump()
            else #330
                if DetectRight()
                    Move(2, RIGHT)
                else
                    Move(2, LEFT)
                    CheckJump()

fun Move(step, left)
    var count
    while count < step
        MoveForward()
        count += 1
        if count % 2 is left or (count is 3 and not left)
            TurnLeft()

#main
loop
    scan = Robo_Scaner()
    if scan > 0
        if scan is JUMP_PAD
            JumpScaner()
        else
            MoveForward()
    else if scan is NO_TILE
        TurnLeft()
    else
        scan = robo_forward_location()
        if InArray(scan, good[])
            MoveForward()
        else if InArray(scan, bad[])
            TurnLeft()
        else if not Adjacent(scan)
            TurnLeft()

-------------------------------------------------------

# constants
var RIGHT = 0
var LEFT = 1
var NO_TILE = -1
var JUMP_PAD = 3
var UNKNOWN_TILE = -999
var NO_DATA = -20000
var MOVE = 100
var TURN = 200
var SCAN = 300
var DETECT_R = 400
var DETECT_L = 500
var JUMP = 600

#variables
var order
var result
var data

#functions
fun Find()
    var check
    for i in 0, 2, 1
        probo_forward()
        probo_left()
        probo_forward()
        if probo_use() > 0
            check = 1
        probo_left()
        probo_left()
        probo_forward()
        if check
            check = probo_location()
        probo_forward()
        probo_left()
        probo_left()
        if check
            while i > 0
                probo_left()
                i -= 1
            break
        probo_left()
    transmit(0, check)

fun Move(step, left)
    var count
    while count < step
        probo_forward()
        count += 1
        if count % 2 is left or (count is 3 and not left)
            probo_left()

#main
loop
    order = NO_DATA
    while order is NO_DATA
        order = receive(0)
    if order is MOVE
        probo_forward()
    else if order is TURN
        probo_left()
    else if order is SCAN
        for get in 1, 0
            probo_forward()
            if get
                result = probo_scan()
            probo_left()
            probo_left()
        transmit(0, result)
    else if order is DETECT_R
        var goodTile
        for check in 1, 0
            Move(3, RIGHT)
            if check and probo_scan() > 0
                goodTile = 1
            probo_left()
        transmit(0, goodTile)
    else if order is DETECT_L
        var goodTile
        for check in 1, 0
            Move(3, LEFT)
            if check and probo_scan() > 0
                goodTile = 1
            probo_left()
        transmit(0, goodTile)
    else if order is JUMP
        probo_forward()
        probo_forward()
        probo_left()
        probo_forward()
        probo_left()
        probo_forward()
        transmit(0, JUMP)
